---
import '/src/style.css';

export interface Props {
	title: string;
	description: string;
	content?: string;
	author?: string;
	keywords?: string;
}

const { title, description, content, author, keywords } = Astro.props;
---
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="language" content="en" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={description}>
		<meta property="og:image" content={content} />
		<meta name="author" content={author} />
		<meta name="keywords" content={keywords} />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link rel="preload" as="font" href="https://fonts.googleapis.com/css2?family=Amiko&family=Mandali&family=Raleway:wght@500;600&display=swap" rel="stylesheet">
		<link rel="sitemap" href="/sitemap-index.xml" />
		<title>{title}</title>
		<script :inline>
			// Toma el tema desde localStorage
			const colorTheme = localStorage.getItem('color-theme');
			// Establece el tema a 'dark' si colorTheme es 'dark'
			const theme = colorTheme === 'dark' ? 'dark' : '';
			// AÃ±ade la clase dark a la etiqueta html para habilitar el dark mode
			document.documentElement.classList.add(theme);
		  </script>
	</head>
	<body class="bg-gradient-to-r from-rose-100 to-teal-100 dark:bg-gradient-to-r dark:from-gray-700 dark:via-gray-900 dark:to-black">
		<slot/>
		
		<script src="../data/themeToggle.js"></script>
		<script src="../data/observer.js"></script>
	</body>
</html>